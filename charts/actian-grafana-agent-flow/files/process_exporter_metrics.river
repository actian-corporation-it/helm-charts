// forward_metrics_to must be a list(MetricsReceiver) where collected metrics
// should be forwarded.
argument "forward_metrics_to" {
	optional = false
}

// scrape_interval is a duration which specifies how frequently to collect
// metrics.
argument "scrape_interval" {
	optional = true
	default  = "30s"
}

// scrape_timeout is a duration which specifies how long to wait for a single
// metrics collection to complete.
argument "scrape_timeout" {
	optional = true
	default  = "10s"
}

prometheus.exporter.process "process_exporter" {
	recheck_on_scrape = true
}

discovery.relabel "process_exporter" {
	targets = prometheus.exporter.process.process_exporter.targets

	rule {
		action       = "replace"
		target_label = "job"
		replacement  = "integrations/process_exporter"
	}

	rule {
		action        = "replace"
		source_labels = ["__address__"]
		target_label  = "__port__"
		regex         = ".*:(.*)"
		replacement   = "$1"
	}

	rule {
		action        = "replace"
		source_labels = ["__meta_agent_hostname", "__port__"]
		separator     = ":"
		target_label  = "instance"
	}
}

prometheus.scrape "process_exporter_metrics" {
	targets = discovery.relabel.process_exporter.output
	// targets = prometheus.exporter.process.process_exporter.targets

	metrics_path = "/api/v0/component/module.file.prometheus_process_exporter_metrics/prometheus.exporter.process.process_exporter/metrics"

	forward_to = [prometheus.relabel.process_exporter_metrics.receiver]

	bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

	scrape_interval = argument.scrape_interval.value
	scrape_timeout  = argument.scrape_timeout.value

	tls_config {
		ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
		insecure_skip_verify = false
		server_name          = "kubernetes"
	}
}

prometheus.relabel "process_exporter_metrics" {
	rule {
		source_labels = ["__name__"]
		action        = "drop"
		regex         = "go_.*"
	}

	forward_to = argument.forward_metrics_to.value
}
