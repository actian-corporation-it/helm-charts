// Arguments

// Targets must be a list(map(string)) of targets to scrape
argument "targets" {
	optional = false
}

// forward_metrics_to must be a list(MetricsReceiver) where collected metrics
// should be forwarded.
argument "forward_metrics_to" {
	optional = false
}

// scrape_interval is a duration which specifies how frequently to collect
// metrics.
argument "scrape_interval" {
	optional = true
	default  = "30s"
}

// scrape_timeout is a duration which specifies how long to wait for a single
// metrics collection to complete.
argument "scrape_timeout" {
	optional = true
	default  = "10s"
}

// Processing

// Apply relabeling for metric scraping
discovery.relabel "pods_metrics" {
	targets = argument.targets.value

	rule {
		action        = "keep"
		regex         = ".*-metrics"
		source_labels = ["__meta_kubernetes_pod_container_port_name"]
	}

	// rule {
	// 	replacement  = "discovery_relabel_pods_metrics"
	// 	target_label = "flow_module_name_final"
	// }

	rule {
		action        = "replace"
		regex         = "(https?)"
		replacement   = "$1"
		source_labels = [
			"__meta_kubernetes_pod_annotation_prometheus_io_scheme",
		]
		target_label = "__scheme__"
	}

	rule {
		action        = "drop"
		regex         = "Succeeded|Failed"
		source_labels = ["__meta_kubernetes_pod_phase"]
	}

	rule {
		action        = "replace"
		separator     = ":"
		source_labels = [
			"__meta_kubernetes_pod_name",
			"__meta_kubernetes_pod_container_name",
			"__meta_kubernetes_pod_container_port_name",
		]
		target_label = "instance"
	}
}

// Scrape pods metrics
prometheus.scrape "pods_metrics" {
	targets = discovery.relabel.pods_metrics.output

	forward_to = [prometheus.relabel.pods_metrics.receiver]

	bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

	scrape_interval = argument.scrape_interval.value
	scrape_timeout  = argument.scrape_timeout.value

	tls_config {
		ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
		insecure_skip_verify = false
		server_name          = "kubernetes"
	}
}

// Process post-scrape relabeling
prometheus.relabel "pods_metrics" {
	rule {
		source_labels = ["__name__"]
		action        = "drop"
		regex         = "go_.*"
	}

	forward_to = argument.forward_metrics_to.value
}
